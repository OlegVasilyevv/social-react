{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","css","dialogName","to","activeClassName","active","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","postMessages","Field","component","Textarea","placeholder","validate","requiredField","Dialogs","state","messagesPage","messageElem","messageData","map","key","dialogElem","dialogData","dialog","isAuth","wrapper","friendDialogs","dialogList","dialogWindow","messages","values","onSendMessageClick","newMessageBody","compose","connect","dispatch","sendMessageActionCreator","withAuthRedirect"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,aAAe,8BAA8B,WAAa,4BAA4B,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,0B,+FCUlVC,EAPI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,wBAAIC,UAAWC,IAAIC,YAAY,kBAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAII,QAASR,EAAMS,QCE/EC,EANC,SAACV,GACb,OACI,wBAAIG,UAAWC,IAAIO,SAAUX,EAAMW,U,yCCsCrCC,EAAeC,YAAiB,KAgBhCC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAdL,SAACf,GACpB,OAAO,0BAAMiB,SAAUjB,EAAMkB,cACzB,yBAAKf,UAAWC,IAAIe,cAChB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXb,KAAM,iBACNc,YAAa,yDACbC,SAAU,CAACC,IAAeb,KACjC,6CAWGc,EAtDC,SAAC1B,GAEb,IAAI2B,EAAQ3B,EAAM4B,aACdC,EAAcF,EAAMG,YACnBC,KAAK,SAAApB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAAST,GAAIS,EAAQT,GAAI8B,IAAKrB,EAAQT,QAEjF+B,EAAaN,EAAMO,WAClBH,KAAK,SAAAI,GAAM,OAAI,kBAAC,EAAD,CAAQ1B,KAAM0B,EAAO1B,KAAMP,GAAIiC,EAAOjC,GAAI8B,IAAKG,EAAOjC,QAM1E,OAAoB,IAAjBF,EAAMoC,OACE,kBAAC,IAAD,CAAU9B,GAAG,WAIpB,yBAAKH,UAAWC,IAAIiC,SAChB,yBAAKlC,UAAWC,IAAIkC,eAChB,wBAAInC,UAAWC,IAAImC,YACbN,IAGV,yBAAK9B,UAAWC,IAAIoC,cAChB,wBAAIrC,UAAWC,IAAIqC,UACbZ,GAEN,kBAACf,EAAD,CAAqBG,SAnBb,SAACyB,GACjB1C,EAAM2C,mBAAmBD,EAAOE,sB,wBCEzBC,sBACXC,aAfkB,SAACnB,GACnB,MAAM,CACFC,aAAcD,EAAMC,iBAIH,SAACmB,GACtB,MAAM,CACFJ,mBAAoB,SAACC,GACjBG,EAASC,YAAyBJ,SAO1CK,IAFWJ,CAGbnB","file":"static/js/4.98a84c57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__1yF4X\",\"friendDialogs\":\"Dialogs_friendDialogs__3aEps\",\"dialogWindow\":\"Dialogs_dialogWindow__2sSxW\",\"dialogList\":\"Dialogs_dialogList__TlGHw\",\"dialogName\":\"Dialogs_dialogName__WVk3a\",\"messages\":\"Dialogs_messages__2kFNQ\",\"message\":\"Dialogs_message__B8MdA\",\"postMessages\":\"Dialogs_postMessages__3BLeB\",\"active\":\"Dialogs_active__29X5G\"};","import React from 'react';\r\nimport css from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return(\r\n        <li className={css.dialogName}><NavLink to={path} activeClassName={css.active}>{props.name}</NavLink></li>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport css from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <li className={css.message}>{props.message}</li>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport css from './Dialogs.module.css';\r\nimport Dialog from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../Utils/Validators/Validators\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.messagesPage;\r\n    let messageElem = state.messageData\r\n        .map( message => <Message message={message.message} id={message.id} key={message.id} /> );\r\n\r\n    let dialogElem = state.dialogData\r\n        .map( dialog => <Dialog name={dialog.name} id={dialog.id} key={dialog.id}/> );\r\n\r\n    let AddNewMessage = (values) => {\r\n        props.onSendMessageClick(values.newMessageBody);\r\n    }\r\n\r\n    if(props.isAuth === false){\r\n        return <Redirect to='/login'/>\r\n    }\r\n\r\n    return(\r\n        <div className={css.wrapper}>\r\n            <div className={css.friendDialogs}>\r\n                <ul className={css.dialogList}>\r\n                    { dialogElem }\r\n                </ul>\r\n            </div>\r\n            <div className={css.dialogWindow}>\r\n                <ul className={css.messages}>\r\n                    { messageElem }\r\n                </ul>\r\n                <AddMessageFormRedux onSubmit={AddNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div className={css.postMessages}>\r\n            <Field component={Textarea}\r\n                   name={'newMessageBody'}\r\n                   placeholder={'Сообщение'}\r\n                   validate={[requiredField, maxLength100]}/>\r\n            <button>Send</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\n\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessageActionCreator, updateNewMessageBodyActionCreator} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        onSendMessageClick: (newMessageBody) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}